@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}


@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


@function golden($px) {
  @return 1.61803398875 * $px;
}


@function rgolden($px) {
  @return 0.6180339887 * $px;
}


@function map-reverse($map) {
  $map-keys: map-keys($map);
  $reversed-map: ();

  @for $x from length($map-keys) through 1 {
    $nth: nth($map-keys, $x);
    $reversed-map: map-merge($reversed-map, ($nth: map-get($map, $nth)));
  }

  @return $reversed-map;
}


@mixin transform($style...) {
  @include prefix((transform: $style), webkit moz);
}

@mixin transition($style...) {
  @include prefix((transition: $style), webkit);
}

@mixin transition-property($style...) {
  @include prefix((transition-property: $style), webkit);
}

@mixin transition-duration($style...) {
  @include prefix((transition-duration: $style), webkit);
}

@mixin transition-timing-function($style...) {
  @include prefix((transition-timing-function: $style), webkit);
}

@mixin transition-delay($style...) {
  @include prefix((transition-delay: $style), webkit);
}

@mixin box-shadow($style) {
  @include prefix((box-shadow: $style), webkit);
}


@mixin blur($size) {
  @include prefix((filter: blur($size)), webkit);
}


@function calculate-rem($size) {
  @if unit($size) != 'px' {
    @return $size;
  }

  $remSize: $size / $base-rem;
  @return $remSize * 1.0rem;
}


@function scale-rem($scale) {
  @return calculate-rem($scale * $base-rem);
}


@mixin rem-property($property, $base-size, $adjusted-size: 1.0,
                    $with-original: false) {
  @if ($base-size and index('initial' 'inherit' 'auto' 'normal', $base-size)) or
      ($base-size and unit($base-size) != 'px') {
    #{$property}: $base-size;
  } @else {
    $new-size: $base-size * $adjusted-size;

    @if $with-original {
      #{$property}: $new-size;
    }

    #{$property}: calculate-rem($new-size);
  }
}

@function unit-add($unit-a, $unit-b) {
  $num-a: $unit-a;
  $num-b: $unit-b;

  @if (unit($unit-a) == 'px') {
    $num-a: calculate-rem($unit-a);
  }


  @if (unit($unit-b) == 'px') {
    $num-b: calculate-rem($unit-b);
  }

  @return $num-a + $num-b;
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@function normalize-whitespace($name) {
  @if str-index($name, '  ') {
    $name: str-replace($name, '  ', ' ');
    $name: normalize-whitespace($name);
  }

  @return $name;
}


@function keep-safe($name) {
  $name: normalize-whitespace($name);
  @each $char in (' ', '(', '*', ')', ',', '.', '#') {
    $name: str-replace($name, $char, '__');
  }
  @return $name;
}


@if not global-variable-exists(-CURLS-CACHE) {
  $-CURLS-CACHE: () !global;
}


@mixin keep($name) {
  @if not index($-CURLS-CACHE, $name) {
    $-CURLS-CACHE: append($-CURLS-CACHE, $name) !global;
    @content;
  }
}


@mixin keepholder($name) {
  @at-root {
    @include keep(--keepholder--#{$name}) {
      %#{$name} {
        @content;
      }
    }
  }
}


@mixin import-once($name) {
  $name: --IMPORT--#{$name};
  @include keep($name) {
    @content;
  }
}


@function mod($baseClass, $mod) {
  @return #{$baseClass}#{$baseClass}--#{$mod};
}

@function el($baseClass, $el) {
  @return #{$baseClass}__#{$el};
}


@mixin harden($base, $amendment) {
  .#{$base}.#{$amendment} {
    @extend .#{$amendment};
  }
}
