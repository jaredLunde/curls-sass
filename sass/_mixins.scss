@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}


@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


@function golden($px) {
  @return round(1.61803398875 * $px);
}


@function rgolden($px) {
  @return round(0.6180339887 * $px);
}


@function map-reverse($map) {
  $map-keys: map-keys($map);
  $reversed-map: ();

  @for $x from length($map-keys) through 1 {
    $nth: nth($map-keys, $x);
    $reversed-map: map-merge($reversed-map, ($nth: map-get($map, $nth)));
  }

  @return $reversed-map;
}


@mixin transform($style...) {
  @include prefix((transform: $style), webkit moz);
}


@mixin transition($style...) {
  @include prefix((transition: $style), webkit);
}


@mixin box-shadow($style) {
  @include prefix((box-shadow: $style), webkit);
}


@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}


@mixin rem-property($property, $baseSize, $adjustedSize: 1.0) {
  @if ($baseSize and index('initial' 'inherit' 'auto' 'normal', $baseSize)) or
      ($baseSize and unit($baseSize) != 'px') {
    #{$property}: $baseSize;
  } @else {
    $newSize: $baseSize * $adjustedSize;
    #{$property}: $newSize;
    #{$property}: calculateRem($newSize);
  }
}


@mixin font-size($size, $adjustedSize: 1.0) {
  @include rem-property('font-size', $size, $adjustedSize);
}


@mixin line-height($size) {
  @include rem-property('line-height', $size);
}


@mixin font($size, $weight:null, $color:null, $family:null) {
  @if $weight {
    font-weight: $weight;
  }
  @if $color {
    color: $color;
  }
  @if $family {
    font-family: $family;
  }
  @include font-size($size);
}


@mixin font-line($size, $line-size, $weight:null, $color:null, $family:null) {
  @if $weight {
    font-weight: $weight;
  }
  @if $color {
    color: $color;
  }
  @if $family {
    font-family: $family;
  }
  @include font-size($size);
  @include line-height($line-size);
}


@mixin alpha-attribute($attribute, $color, $background) {
  $percent: alpha($color) * 100%;
  $opaque: opacify($color, 1);
  $solid-color: mix($opaque, $background, $percent);
  #{$attribute}: $solid-color;
  #{$attribute}: $color;
}


@mixin blur($size) {
  @include prefix((filter: blur($size)), webkit);
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@if not global-variable-exists(-CURLS-CACHE) {
  $-CURLS-CACHE: () !global;
}


@mixin cache($name) {
  @if not index($-CURLS-CACHE, $name) {
    $-CURLS-CACHE: append($-CURLS-CACHE, $name) !global;
    @content;
  }
}


@mixin import-once($name) {
  $name: --IMPORT--#{$name};
  @include cache($name) {
    @content;
  }
}
