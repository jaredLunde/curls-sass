@include grid(map-get($grid-columns, l), map-get($grid-gutter, l));

@include grid(map-get($grid-columns, xl),
              map-get($grid-gutter, xl),
              $name-ext: 'xl',
              $breakpoint: 'xl');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, l),
              $name-ext: 'l',
              $breakpoint: 'l');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, l),
              $breakpoint: 'l');

@include grid(map-get($grid-columns, m),
              map-get($grid-gutter, m),
              $name-ext: 'm',
              $breakpoint: 'm');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, m),
              $multiple: map-get($grid-columns, l) / map-get($grid-columns, m),
              $breakpoint: 'm');

@include grid(map-get($grid-columns, xs),
              map-get($grid-gutter, s),
              $name-ext: 's',
              $breakpoint: 's');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, xs),
              $multiple: map-get($grid-columns, l) / map-get($grid-columns, xs),
              $breakpoint: 'xs');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, s),
              $multiple: map-get($grid-columns, l) / map-get($grid-columns, s),
              $breakpoint: 's');

@include grid(map-get($grid-columns, l),
              map-get($grid-gutter, xs),
              $breakpoint: 'xs',
              $name-ext: 'xs');


@mixin grid($cols, $gutter-size: 0, $name-prefix: 'x', $name-ext: null,
            $multiple: 1, $breakpoint: null) {
  @for $x from 1 through $cols {
    @include grid-column($x, $cols, $gutter-size, $name-prefix, $name-ext,
                         $multiple, $breakpoint);
  }
}


$-grid-cache: ();
$-pad-cache: ();


@mixin grid-column($x, $cols, $gutter-size: 0, $name-prefix: 'x',
                   $name-ext: null, $multiple: 1, $breakpoint: null) {
  @if $name-ext {
    $name-ext: "--#{$name-ext}";
  } @else {
    $name-ext: '';
  }

  $padding-name: 'gridpad--#{$gutter-size}--#{$breakpoint}';
  $_width: ($x / $cols) * $multiple;
  @if $_width > 1 {
    $_width: 1;
  }
  $p-name: str_replace('x#{$_width}--#{$breakpoint}', '.', '__');
  $cached: true;
  $pad-cached: true;

  @if not index($-grid-cache, $p-name) {
    $-grid-cache: append($-grid-cache, $p-name) !global;
    $cached: false;
  }

  @if not index($-pad-cache, $padding-name) {
    $-pad-cache: append($-pad-cache, $padding-name) !global;
    $pad-cached: false;
  }

  @if $cached == false {
    @at-root {
      @if $breakpoint != null {
        %#{$p-name} {
          @media #{map-get($grid-breakpoint, $breakpoint)} {
            @include make-grid-column($x, $cols, $gutter-size, $multiple);
          }
        }
      } @else {
        %#{$p-name} {
          @include make-grid-column($x, $cols, $gutter-size, $multiple);
        }
      }
    }
  }

  @if $pad-cached == false {
    @at-root {
      @if $breakpoint != null {
        %#{$padding-name} {
          @media #{map-get($grid-breakpoint, $breakpoint)} {
            padding: 0 $gutter-size / 2;
          }
        }
      } @else {
        %#{$padding-name} {
          padding: 0 $gutter-size / 2;
        }
      }
    }
  }

  .#{$name-prefix}#{$x}#{$name-ext} {
    @extend %#{$p-name};
  }

  .#{$name-prefix}#{$x}#{$name-ext} {
    @extend %#{$padding-name};
  }
}


@mixin make-grid-column($n, $columns, $gutter-size: 0, $multiple: 1) {
  $width: ($n / $columns) * $multiple;
  @if $width > 1 {
    $width: 1;
  }
  $width: percentage($width);
  width: $width;
  // max-width: $width;
  @include flex-basis($width);
}
