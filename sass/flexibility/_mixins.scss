@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}


@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}


@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}


@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}


@mixin flex-flow($values: (row nowrap)) {
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}


@mixin flex-grow($int: 1) {
  -ms-flex-positive: $int;
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}


@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -ms-flex-shrink: $int;
  flex-shrink:  $int;
}


@mixin flex-basis($value: auto) {
  -ms-flex-preferred-size: $value;
  -webkit-flex-basis: $value;
  flex-basis: $value;
}


@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}


@mixin flex($fg: 1, $fs: 0, $fb: auto) {
  $fg-boxflex: $fg;

  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flexbox: $fg $fs $fb;
  flex: $fg $fs $fb;
}


@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -font-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
    justify-content: space-between;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}


@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}


@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}


@mixin align-content($value: stretch) {
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}


@mixin extend-flex-justify($name, $prefix: 'x-', $selector: '') {
  @each $value in $FLEX-JUSTIFY {
    #{$selector}.#{$name}--#{$prefix}#{$value} {
      @extend %#{$flex-name}--x-#{$value};
    }
  }
}


@mixin extend-flex-align($name, $prefix: 'y-', $selector: '') {
  @each $value in $FLEX-ALIGN {
    #{$selector}.#{$name}--#{$prefix}#{$value} {
      @extend %#{$flex-name}--y-#{$value};
    }
  }
}


@mixin extend-flex-content($name, $prefix: 'content-', $selector: null) {
  @each $value in $FLEX-ALIGN-CONTENT {
    #{$selector}.#{$name}--content-#{$value} {
      @extend %#{$flex-name}--#{$prefix}#{$value};
    }
  }
}


@mixin extend-flex-self($name, $prefix: 'self-', $selector: null) {
  @each $value in $FLEX-ALIGN-SELF {
    #{$selector}.#{$name}--#{$prefix}#{$value} {
      @extend %#{$flex-name}--self-#{$value};
    }
  }
}


@mixin extend-flex-base($name, $selector: '') {
  @each $value in $FLEX-BASE {
    #{$selector}.#{$name}--#{$value} {
      @extend %#{$flex-name}--#{$value};
    }
  }
}


@mixin extend-flex($name, $selectors: ('',)) {
  @each $selector in $selectors {
    @include extend-flex-base($name, $selector: $selector);
    @include extend-flex-justify($name,  $selector: $selector);
    @include extend-flex-align($name,  $selector: $selector);
    @include extend-flex-content($name,  $selector: $selector);
    @include extend-flex-self($name,  $selector: $selector);
  }
}
