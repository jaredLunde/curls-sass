@mixin display-flex {
  display: table;
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}


@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}


@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}


@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}


@mixin flex-flow($values: (row nowrap)) {
  // No Webkit/FF Box fallback.
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}


@mixin flex-grow($int: 1) {
  -ms-flex-positive: $int;
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}


@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-shrink: $int;
  flex-shrink:  $int;
}


@mixin flex-basis($value: auto) {
  -ms-flex-preferred-size: $value;
  -webkit-flex-basis: $value;
  flex-basis: $value;
}


@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}


@mixin flex($fg: 1, $fs: 0, $fb: auto) {

  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box: $fg-boxflex;
  -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flexbox: $fg $fs $fb;
  flex: $fg $fs $fb;
}


@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -font-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
    justify-content: space-between;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}


@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -mox-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}


@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}


@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}


@mixin extend-flex-justify($name, $prefix: 'x-', $selectors: ()) {
  .#{$name}--#{$prefix}left {
    @extend %#{$flex-name}--x-left;
  }


  .#{$name}--#{$prefix}right {
    @extend %#{$flex-name}--x-right;
  }


  .#{$name}--#{$prefix}center {
    @extend %#{$flex-name}--x-center;
  }


  .#{$name}--#{$prefix}around {
    @extend %#{$flex-name}--x-around;
  }


  .#{$name}--#{$prefix}between {
    @extend %#{$flex-name}--x-between;
  }
}


@mixin extend-flex-align($name, $prefix: 'y-', $selectors: ()) {
  .#{$name}--#{$prefix}top {
    @extend %#{$flex-name}--y-top;
  }


  .#{$name}--#{$prefix}bottom {
    @extend %#{$flex-name}--y-bottom;
  }


  .#{$name}--#{$prefix}center {
    @extend %#{$flex-name}--y-center;
  }


  .#{$name}--#{$prefix}stretch {
    @extend %#{$flex-name}--y-stretch;
  }


  .#{$name}--#{$prefix}between {
    @extend %#{$flex-name}--y-between;
  }


  .#{$name}--#{$prefix}around {
    @extend %#{$flex-name}--y-around;
  }


  .#{$name}--#{$prefix}baseline {
    @extend %#{$flex-name}--y-baseline;
  }
}


@mixin extend-flex-content($name, $prefix: 'content-', $selectors: ()) {
  .#{$name}--content-top {
    @extend %#{$flex-name}--#{$prefix}top;
  }


  .#{$name}--content-bottom {
    @extend %#{$flex-name}--#{$prefix}bottom;
  }


  .#{$name}--content-center {
    @extend %#{$flex-name}--#{$prefix}center;
  }


  .#{$name}--content-stretch {
    @extend %#{$flex-name}--#{$prefix}stretch;
  }


  .#{$name}--content-between {
    @extend %#{$flex-name}--#{$prefix}between;
  }


  .#{$name}--content-around {
    @extend %#{$flex-name}--#{$prefix}around;
  }
}


@mixin extend-flex-self($name, $prefix: 'self-y-', $selectors: ()) {
  .#{$name}--#{$prefix}top {
    @extend %#{$flex-name}--self-y-top;
  }


  .#{$name}--#{$prefix}bottom {
    @extend %#{$flex-name}--self-y-bottom;
  }


  .#{$name}--#{$prefix}center {
    @extend %#{$flex-name}--self-y-center;
  }


  .#{$name}--#{$prefix}stretch {
    @extend %#{$flex-name}--self-y-stretch;
  }


  .#{$name}--#{$prefix}baseline {
    @extend %#{$flex-name}--self-y-baseline;
  }
}


@mixin extend-flex-base($name, $selectors: ()) {
  .#{$name}--fixed {
    @extend %#{$flex-name}--fixed;
  }


  .#{$name}--fluid {
    @extend %#{$flex-name}--fixed;
  }


  .#{$name}--first {
    @extend %#{$flex-name}--first;
  }


  .#{$name}--last {
    @extend %#{$flex-name}--last;
  }


  .#{$name}--grow {
    @extend %#{$flex-name}--last;
  }


  .#{$name}--shrink {
    @extend %#{$flex-name}--shrink;
  }


  .#{$name}--reverse {
    @extend %#{$flex-name}--reverse;
  }


  .#{$name}--nowrap {
    @extend %#{$flex-name}--nowrap;
  }
}


@mixin extend-flex($name, $selectors: ()) {
  @include extend-flex-base($name, $selectors: $selectors);
  @include extend-flex-justify($name,  $selectors: $selectors);
  @include extend-flex-align($name,  $selectors: $selectors);
  @include extend-flex-content($name,  $selectors: $selectors);
  @include extend-flex-self($name,  $selectors: $selectors);
}
