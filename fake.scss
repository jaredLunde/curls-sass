@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}


@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}


@function golden($px) {
  @return round(1.61803398875 * $px);
}


@function rgolden($px) {
  @return round(0.6180339887 * $px);
}


@function map-reverse($map) {
  $map-keys: map-keys($map);
  $reversed-map: ();

  @for $x from length($map-keys) through 1 {
    $nth: nth($map-keys, $x);
    $reversed-map: map-merge($reversed-map, ($nth: map-get($map, $nth)));
  }

  @return $reversed-map;
}


@mixin transform($style...) {
  @include prefix((transform: $style), webkit moz);
}


@mixin transition($style...) {
  @include prefix((transition: $style), webkit);
}


@mixin box-shadow($style) {
  @include prefix((box-shadow: $style), webkit);
}


@mixin blur($size) {
  @include prefix((filter: blur($size)), webkit);
}


@function calculate-rem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}


@mixin rem-property($property, $base-size, $adjusted-size: 1.0,
                    $with-original: false) {
  @if ($base-size and index('initial' 'inherit' 'auto' 'normal', $base-size)) or
      ($base-size and unit($base-size) != 'px') {
    #{$property}: $base-size;
  } @else {
    $new-size: $base-size * $adjusted-size;

    @if $with-original {
      #{$property}: $new-size;
    }

    #{$property}: calculate-rem($new-size);
  }
}


/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


@function normalize-whitespace($name) {
  @if str-index($name, '  ') {
    $name: str-replace($name, '  ', ' ');
    $name: normalize-whitespace($name);
  }

  @return $name;
}


@function keep-safe($name) {
  $name: normalize-whitespace($name);
  @each $char in (' ', '(', '*', ')', ',', '.', '#') {
    $name: str-replace($name, $char, '__');
  }
  @return $name;
}


@if not global-variable-exists(-CURLS-CACHE) {
  $-CURLS-CACHE: () !global;
}


@mixin keep($name) {
  @if not index($-CURLS-CACHE, $name) {
    $-CURLS-CACHE: append($-CURLS-CACHE, $name) !global;
    @content;
  }
}


@mixin keepholder($name) {
  @at-root {
    @include keep(--keepholder--#{$name}) {
      %#{$name} {
        @content;
      }
    }
  }
}


@function mod($baseClass, $mod) {
  @return #{$baseClass}#{$baseClass}--#{$mod};
}

@function el($baseClass, $el) {
  @return #{$baseClass}__#{$el};
}



%pill {
    border-radius: $MAX-PX;
  }


  // Visibility */
  %visible {
    z-index: 1;
    opacity: 1;
  }

  %hidden {
    z-index: -1000;
    opacity: 0;
  }

  %remove {
    display: none;
  }


  // Positioning */
  %fixed-top-fw {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    bottom: auto;
    width: 100%;
  }


  %fixed-bottom-fw {
    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
    top: auto;
    width: 100%;
  }


  %absolute-top {
    position: absolute;
    top: 0;
    left: 0;
    bottom: auto;
  }

  %absolute-bottom {
    position: absolute;
    bottom: 0;
    left: 0;
    top: auto;
  }

  %absolute-top-fw {
    @extend %absolute-top;
    right: 0;
    width: 100%;
  }


  %absolute-bottom-fw {
    @extend %absolute-top-fw;
    @extend %absolute-bottom;
  }

// Constants
$MAX-Z-INDEX: 2147483647;
$MAX-PX: 10000000px;


// Default borders
$border-width: 1px !default;
$border-style: solid !default;
$border-radius: 2px !default;


// Responsive media queries
$phone: "only screen and (max-width: 639px)" !default;
$phone-max: $phone !default;
$phone-s: "only screen and (max-width: 324px)" !default;
$phone-m: "only screen and (min-width: 325px) and (max-width: 469px)" !default;
$phone-max-m: "only screen and (max-width: 469px)" !default;
$phone-l: "only screen and (min-width: 480px) and (max-width: 639px)" !default;
$phone-max-l: "only screen and (max-width: 639px)" !default;

$tablet: "only screen and (min-width: 640)" !default;
$tablet-max: "only screen and (max-width: 1023px)" !default;
$tablet-s: "only screen and (min-width: 600px) and (max-width: 719px)" !default;
$tablet-max-s: "only screen and (max-width: 719px)" !default;
$tablet-m: "only screen and (min-width: 720px) and (max-width: 839px)" !default;
$tablet-max-m: "only screen and (max-width: 839px)" !default;
$tablet-l: "only screen and (min-width: 840px) and (max-width: 1023px)" !default;
$tablet-max-l: "only screen and (max-width: 1023px)" !default;

$desktop: "only screen and (min-width: 960px)" !default;
$desktop-max: "only screen" !default;
$desktop-s: "only screen and (min-width: 960px) and (max-width: 1023px)" !default;
$desktop-max-s: "only screen and (max-width: 1023px)" !default;
$desktop-m: "only screen and (min-width: 1024px) and (max-width: 1359px)" !default;
$desktop-max-m: "only screen and (max-width: 1359px)" !default;
$desktop-l: "only screen and (min-width: 1360px)" !default;

$high-dpi: "only screen and (-webkit-min-device-pixel-ratio: 1.3),
            only screen and (min--moz-device-pixel-ratio: 1.3),
            only screen and (min-resolution: 1.3dppx),
            only screen and (min-resolution: 125dpi)" !default;




*, *:before, *:after {
    /** border-box for all, as it should be */
    box-sizing: border-box;
  }

  a {
    cursor: pointer;
  }


/**
 *
 * SPACING
 *
 */
$padding-name: 'p' !default;
$margin-name: 'm' !default;
$padding-class: '.#{$padding-name}' !default;
$margin-class: '.#{$margin-name}' !default;

// padding + margins
$spacing-sizes: (0, 4px, 8px, 12px, 16px, 20px, 24px, 28px, 32px, 36px, 40px,
                 44px, 48px) !default;

/** Creates placeholders and classes */
@mixin spacing-placeholders($size, $pre, $prop) {
  $spacing-name: --spacing--#{$prop}--#{$size}--#{$pre};

  @include keep($spacing-name) {
    $stripped-size: strip-units($size);

    %#{$pre}--t#{$stripped-size} {
      #{$prop}-top: $size !important;
    }

    %#{$pre}--b#{$stripped-size} {
      #{$prop}-bottom: $size !important;
    }

    %#{$pre}--y#{$stripped-size} {
      @extend %#{$pre}--t#{$stripped-size};
      @extend %#{$pre}--b#{$stripped-size};
    }

    %#{$pre}--r#{$stripped-size} {
      #{$prop}-right: $size !important;
    }

    %#{$pre}--l#{$stripped-size} {
      #{$prop}-left: $size !important;
    }

    %#{$pre}--x#{$stripped-size} {
      @extend %#{$pre}--r#{$stripped-size};
      @extend %#{$pre}--l#{$stripped-size};
    }

    %#{$pre}--#{$stripped-size} {
      #{$prop}: $size !important;
    }
  }
}


@mixin spacing-group($size, $pre, $prop) {
  $stripped-size: strip-units($size);

  @include spacing-placeholders($size, $pre, $prop);

  .#{$pre}--t#{$stripped-size} {
    @extend %#{$pre}--t#{$stripped-size};
  }

  .#{$pre}--b#{$stripped-size} {
    @extend %#{$pre}--b#{$stripped-size};
  }

  .#{$pre}--y#{$stripped-size} {
    @extend %#{$pre}--y#{$stripped-size};
  }

  .#{$pre}--r#{$stripped-size} {
    @extend %#{$pre}--r#{$stripped-size};
  }

  .#{$pre}--l#{$stripped-size} {
    @extend %#{$pre}--l#{$stripped-size};
  }

  .#{$pre}--x#{$stripped-size} {
    @extend %#{$pre}--x#{$stripped-size};
  }

  .#{$pre}--#{$stripped-size} {
    @extend %#{$pre}--#{$stripped-size};
  }
}


@mixin margin-group($size, $prefix: $margin-name) {
  @include spacing-group($size, $prefix, 'margin')
}


@mixin padding-group($size, $prefix: $padding-name) {
  @include spacing-group($size, $prefix, 'padding')
}


@mixin margin-placeholders($size, $prefix: $margin-name) {
  @include spacing-placeholders($size, $prefix, 'margin')
}


@mixin padding-placeholders($size, $prefix: $padding-name) {
  @include spacing-placeholders($size, $prefix, 'padding')
}

@each $x in $spacing-sizes {
    @include margin-placeholders($x);
    @include padding-placeholders($x);
  }


 @each $x in $spacing-sizes {
    @include margin-group($x);
    @include padding-group($x);
  }

  #{$padding-class}--gutters {
    @include break-for(gutters);
  }

  #{$margin-class}--gutters {
    @include break-for(margin-gutters);
  }

  #{$padding-class}--gutters-l {
    @include break-for(gutters--l);
  }

  #{$margin-class}--gutters-l {
    @include break-for(margin-gutters--l);
  }

  #{$padding-class}--gutters-r {
    @include break-for(gutters--r);
  }

  #{$margin-class}--gutters-r {
    @include break-for(margin-gutters--r);
  }

  #{$padding-class}--gutters-t {
    @include break-for(gutters--t);
  }

  #{$margin-class}--gutters-t {
    @include break-for(margin-gutters--t);
  }

  #{$padding-class}--gutters-b {
    @include break-for(gutters--b);
  }

  #{$margin-class}--gutters-b {
    @include break-for(margin-gutters--b);
  }

  #{$padding-class}--gutters-x {
    @include break-for(gutters--x);
  }

  #{$margin-class}--gutters-x {
    @include break-for(margin-gutters--x);
  }

  #{$padding-class}--gutters-y {
    @include break-for(gutters--y);
  }

  #{$margin-class}--gutters-y {
    @include break-for(margin-gutters--y);
  }

  #{$padding-class}--gutters-2 {
    @include break-for(gutters--2);
  }

  #{$margin-class}--gutters-2 {
    @include break-for(margin-gutters--2);
  }

  #{$padding-class}--gutters-2l {
    @include break-for(gutters--2l);
  }

  #{$margin-class}--gutters-2l {
    @include break-for(margin-gutters--2l);
  }

  #{$padding-class}--gutters-2r {
    @include break-for(gutters--2r);
  }

  #{$margin-class}--gutters-2r {
    @include break-for(margin-gutters--2r);
  }

  #{$padding-class}--gutters-2t {
    @include break-for(gutters--2t);
  }

  #{$margin-class}--gutters-2t {
    @include break-for(margin-gutters--2t);
  }

  #{$padding-class}--gutters-2b {
    @include break-for(gutters--2b);
  }

  #{$margin-class}--gutters-2b {
    @include break-for(margin-gutters--2b);
  }

  #{$padding-class}--gutters-2x {
    @include break-for(gutters--2x);
  }

  #{$margin-class}--gutters-2x {
    @include break-for(margin-gutters--2x);
  }

  #{$padding-class}--gutters-2y {
    @include break-for(gutters--2y);
  }

  #{$margin-class}--gutters-2y {
    @include break-for(margin-gutters--2y);
  }

/**
 *
 * GRID
 *
 **/

$grid-name: 'g' !default;
$grid-class: ".#{$grid-name}" !default;

$grid-row-name: gr !default;
$grid-row-class: ".#{$grid-row-name}" !default;

$grid-col-name: gc !default;
$grid-col-class: ".#{$grid-col-name}" !default;


$grid-gutter: (
  xs: 8px,
  s: 12px,
  m: 12px,
  l: 16px,
  xl: 24px,
) !default;


$grid-columns: (
  xs: 4,
  s: 4,
  m: 8,
  l: 12,
  xl: 16,
) !default;


$grid-breakpoint: (
  xs: $phone-s,
  s: $phone-max,
  m: $tablet-max,
  l: $desktop-max-m,
  xl: $desktop-l
) !default;


$BREAKPOINT-KEYS: map-keys($grid-breakpoint);
$R-BREAKPOINT-KEYS: map-keys(map-reverse($grid-breakpoint));
$DEFAULT-BREAKPOINT: nth($R-BREAKPOINT-KEYS, 1) !default;

// Breakpoint controllers */
@mixin breakpoint($breakpoint) {
  @media #{map-get($grid-breakpoint, $breakpoint)} {
    @content;
  }
}


@mixin breakholder($prop-name, $directives: (), $breakpoints: null) {
  @if $breakpoints == null {
    $breakpoints: $R-BREAKPOINT-KEYS;
  }

  @at-root {
    @include keep(#{$prop-name}) {
      %#{$prop-name} {
        @each $directive, $map in $directives {
          #{$directive}: map-get($map, $DEFAULT-BREAKPOINT);}
        @content;
      }
    }

    @each $bp in $breakpoints {
      @include keep(#{$prop-name}--#{$bp}) {
        %#{$prop-name}--#{$bp} {
          @include breakpoint($bp) {
            @each $directive, $map in $directives {
              #{$directive}: map-get($map, $bp);}
            @content;
          }
        }
      }
    }
  }
}


@mixin break-for($prop-name, $breakpoints: null) {
  @if $breakpoints == null {
    $breakpoints: $R-BREAKPOINT-KEYS;
  }
  @extend %#{$prop-name};
  @each $bp in $breakpoints {
    @extend %#{$prop-name}--#{$bp};
  }
}


// Grid controllers */
@mixin grid-breakpoint($breakpoint, $name-prefix: 'x') {
  @include breakpoint($breakpoint) {
    @include grid(map-get($grid-columns, $breakpoint),
                  $name-prefix: $name-prefix,
                  $name-mod: $breakpoint,
                  $breakpoint: $breakpoint);
  }
}


@mixin grid($cols, $name-prefix: 'x', $name-mod: null, $breakpoint: null) {
  @for $x from 1 through $cols {
    @include grid-column($x,
                         $cols,
                         $name-prefix: $name-prefix,
                         $name-mod: $name-mod,
                         $breakpoint: $breakpoint);
  }
}


@mixin grid-column($x, $cols, $name-prefix: 'x', $name-mod: null,
                   $breakpoint: null) {
  @if $name-mod {
    $name-mod: "--#{$name-mod}";
  } @else {
    $name-mod: '';
  }

  $column-name: --column--#{$x / $cols}--#{$cols}--#{$breakpoint};

  @include keep($column-name) {
    %#{$column-name} {
      @include make-grid-column($x, $cols);
    }
  }

  .#{$name-prefix}#{$x}#{$name-mod} {
    @extend %#{$column-name};
  }
}


@mixin make-grid-column($x, $columns) {
  $width: percentage($x / $columns);
  max-width: $width;
  @include flex-basis($width);
}



%#{$grid-row-name} {
    @extend %#{$flex-name};
    @extend %#{$flex-name}--wrap;
    @extend %#{$flex-name}--x;
    @include flex-basis(100%);
    @include break-for(gutters--x); // Gutters
  }


  %#{$grid-col-name} {
    // @extend %#{$flex-name};
    @extend %#{$flex-name}--fluid;
    // @extend %#{$flex-name}--y-top;
    // @extend %#{$flex-name}--wrap;
    // @extend %#{$flex-name}--y;
    position: relative;
    @include break-for(gutters--x); // Gutters
  }

  // Padding gutters */
  $gutter-map: ();
  @each $bp in $R-BREAKPOINT-KEYS {
    $gutter-val: map-get($grid-gutter, $bp);
    $gutter-map: map-merge($gutter-map, ($bp: $gutter-val / 2));
  }

  $gutter-map--2x: ();
  @each $bp in $R-BREAKPOINT-KEYS {
    $gutter-val: map-get($grid-gutter, $bp);
    $gutter-map--2x: map-merge($gutter-map--2x, ($bp: $gutter-val));
  }

  @include breakholder(gutters--l, (padding-left: $gutter-map));
  @include breakholder(gutters--r, (padding-right: $gutter-map));
  @include breakholder(gutters--t, (padding-top: $gutter-map));
  @include breakholder(gutters--b, (padding-bottom: $gutter-map));
  @include breakholder(gutters--x, (padding-left: $gutter-map,
                                    padding-right: $gutter-map));
  @include breakholder(gutters--y, (padding-top: $gutter-map,
                                    padding-bottom: $gutter-map));
  @include breakholder(gutters, (padding: $gutter-map));
  @include breakholder(gutters--2l, (padding-left: $gutter-map--2x));
  @include breakholder(gutters--2r, (padding-right: $gutter-map--2x));
  @include breakholder(gutters--2t, (padding-top: $gutter-map--2x));
  @include breakholder(gutters--2b, (padding-bottom: $gutter-map--2x));
  @include breakholder(gutters--2x, (padding-left: $gutter-map--2x,
                                    padding-right: $gutter-map--2x));
  @include breakholder(gutters--2y, (padding-top: $gutter-map--2x,
                                     padding-bottom: $gutter-map--2x));
  @include breakholder(gutters--2, (padding: $gutter-map--2x));


  // Margin gutters */
  @include breakholder(margin-gutters--l, (margin-left: $gutter-map));
  @include breakholder(margin-gutters--r, (margin-right: $gutter-map));
  @include breakholder(margin-gutters--t, (margin-top: $gutter-map));
  @include breakholder(margin-gutters--b, (margin-bottom: $gutter-map));
  @include breakholder(margin-gutters--x, (margin-left: $gutter-map,
                                           margin-right: $gutter-map));
  @include breakholder(margin-gutters--y, (margin-top: $gutter-map,
                                           margin-bottom: $gutter-map));
  @include breakholder(margin-gutters, (margin: $gutter-map));
  @include breakholder(margin-gutters--2l, (margin-left: $gutter-map--2x));
  @include breakholder(margin-gutters--2r, (margin-right: $gutter-map--2x));
  @include breakholder(margin-gutters--2t, (margin-top: $gutter-map--2x));
  @include breakholder(margin-gutters--2b, (margin-bottom: $gutter-map--2x));
  @include breakholder(margin-gutters--2x, (margin-left: $gutter-map--2x,
                                           margin-right: $gutter-map--2x));
  @include breakholder(margin-gutters--2y, (margin-top: $gutter-map--2x,
                                           margin-bottom: $gutter-map--2x));
  @include breakholder(margin-gutters--2, (margin: $gutter-map--2x));

  // Hide selectors */
  @include breakholder(hide) {
    display: none !important;
  }


#{$grid-row-class} {
    @extend %#{$grid-row-name};
  }


  #{$grid-col-class} {
    @extend %#{$grid-col-name};
  }


  // Grid breakpoints / grid col padding / widths
  @include grid(map-get($grid-columns, $DEFAULT-BREAKPOINT));
  @include grid(map-get($grid-columns, $DEFAULT-BREAKPOINT),
                $name-mod: $DEFAULT-BREAKPOINT);
  @each $bp in $R-BREAKPOINT-KEYS {
    @if $bp != $DEFAULT-BREAKPOINT {
      @include grid-breakpoint($bp);
    }
  }


  // Hider classes
  @each $bp in $R-BREAKPOINT-KEYS {
    .hide--#{$bp}, .x0--#{$bp} {
      @extend %hide--#{$bp};
    }
  }


  #{$grid-class}--nopad,
  #{$grid-row-class}--nopad,
  #{$grid-col-class}--nopad,
  #{$grid-row-class}#{$grid-row-class}--nopad,
  #{$grid-col-class}#{$grid-col-class}--nopad {
    @extend %#{$padding-name}--0;
  }


  // Flex modifiers
  @include extend-flex($grid-name, ('', '.col', '.row'));
